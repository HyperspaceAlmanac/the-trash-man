@using TrashCollector.ViewModels;
@model TrashCollector.Models.Employee

@{
    ViewData["Title"] = "WeeklyPlanner";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h1>WeeklyPlanner</h1>
<h4>Week of @Model.WeekOf</h4>
<div>
    @if (Model.SelectedDay > 6)
    {
        <a class="btn btn-info" asp-action="WeeklyPlanner" asp-route-offset=@(Model.SelectedDay - 7)>Previous Week</a>
    }
    else
    {
        <a class="btn btn-secondary">Previous Week</a>
    }
    Schedule for @(Model.WeekDay):
    <a class="btn btn-info" asp-action="WeeklyPlanner" asp-route-offset=@(Model.SelectedDay + 7)>Next Week</a>
</div>
<br />
<div class="row">
    <a class=@(Model.SelectedDay % 7 == 0 ? "btn btn-secondary col-1" : "btn btn-info col-1") asp-action="WeeklyPlanner" asp-route-offset=@(Model.SelectedDay - (Model.SelectedDay % 7))>Monday</a>
    <a class=@(Model.SelectedDay % 7 == 1 ? "btn btn-secondary col-1" : "btn btn-info col-1") asp-action="WeeklyPlanner" asp-route-offset=@(Model.SelectedDay - (Model.SelectedDay % 7 - 1))>Tuesday</a>
    <a class=@(Model.SelectedDay % 7 == 2 ? "btn btn-secondary col-1" : "btn btn-info col-1") asp-action="WeeklyPlanner" asp-route-offset=@(Model.SelectedDay - (Model.SelectedDay % 7 - 2))>Wednesday</a>
    <a class=@(Model.SelectedDay % 7 == 3 ? "btn btn-secondary col-1" : "btn btn-info col-1") asp-action="WeeklyPlanner" asp-route-offset=@(Model.SelectedDay - (Model.SelectedDay % 7 - 3))>Thursday</a>
    <a class=@(Model.SelectedDay % 7 == 4 ? "btn btn-secondary col-1" : "btn btn-info col-1") asp-action="WeeklyPlanner" asp-route-offset=@(Model.SelectedDay - (Model.SelectedDay % 7 - 4))>Friday</a>
    <a class=@(Model.SelectedDay % 7 == 5 ? "btn btn-secondary col-1" : "btn btn-info col-1") asp-action="WeeklyPlanner" asp-route-offset=@(Model.SelectedDay - (Model.SelectedDay % 7 - 5))>Saturday</a>
    <a class=@(Model.SelectedDay % 7 == 6 ? "btn btn-secondary col-1" : "btn btn-info col-1") asp-action="WeeklyPlanner" asp-route-offset=@(Model.SelectedDay - (Model.SelectedDay % 7 - 6))>Sunday</a>
</div>
<br />
@if (Model.Completed.Count > 0)
{
    <h1>Completed Pickups</h1>
    foreach (var customer in Model.Completed)
    {
        <tr>
            <td>
                <div>
                    Request completed for @customer.FirstName @customer.LastName on @($"{customer.StreetAddress} {customer.City}, {customer.State} {customer.ZipCode}")
                    <a class="btn btn-warning" asp-action="CustomerProfile" asp-route-CustomerId=@customer.Id asp-route-NeedsPickup="false" asp-route-Offset=@Model.SelectedDay>ViewProfile</a>
                </div>
            </td>
        </tr>
    }
}

@if (Model.NeedToCollect.Count > 0)
{
    <h1>Scheduled Requests</h1>
    foreach (var customer in Model.NeedToCollect)
    {
        <tr>
            <td>
                <div>
                    @(customer.WeeklyPickup ? "Scheduled Weekly Pickup for" : "One time pickup for")
                    @(customer.FirstName + " " + customer.LastName + " on ") @($"{customer.StreetAddress} {customer.City}, {customer.State} {customer.ZipCode}")
                    <a class="btn btn-warning" asp-action="CustomerProfile" asp-route-CustomerId=@customer.Id asp-route-NeedsPickup="true" asp-route-Offset=@Model.SelectedDay>ViewProfile</a>
                </div>
            </td>
        </tr>
    }
}
else
{
    <h1>There are no scheduled requests today</h1>
}

<!-- Part of implementation based on what is shown in https://stackoverflow.com/questions/17195950/adding-multiple-markers-to-google-maps -->
<!-- I used similar process of creating javascript functions for adding markers -->
<!-- And adding in multiple calls to these through Html.Raw() -->
@if (Model.Profiles.Where(p => p.GeoLocationSuccess).Count() > 0)
{
    <input type="button" class="btn btn-primary" value="Display Customers on Map" id="show-map" />
    <div id="allCustomersMap" class="google-map"></div>

    <script>
        document.getElementById('show-map').onclick =function myMap() {
        const latAndLng = @Html.Raw("{ lat: " + Model.Profiles.Where(p => p.GeoLocationSuccess).First().Latitude + ", lng: " + Model.Profiles.Where(p => p.GeoLocationSuccess).First().Longitude + " };");
        var mapProp = {
            center: latAndLng,
            zoom: 15,
            mapTypeId: google.maps.MapTypeId.ROADMAP
        };
        var map = new google.maps.Map(document.getElementById("allCustomersMap"), mapProp);

        @foreach (CustomerLocation profile in Model.Profiles) {
            if (profile.GeoLocationSuccess)
            {
                if (profile.NeedsPickup)
                {
                    @Html.Raw("addRedMarker(" + profile.Latitude + ", " + profile.Longitude + ", " + "\"" + profile.FullAddress + "\");");
                }
                else
                {
                    @Html.Raw("addGreenMarker("+ profile.Latitude + ", " + profile.Longitude + ", " + "\"" + profile.FullAddress + "\");");
                }
            }
         }

         function addGreenMarker(x, y, description) {
             var marker = new google.maps.Marker({
                position: new google.maps.LatLng(x, y),
                map: map,
                title: description,
                icon: {
                    url: "http://maps.google.com/mapfiles/ms/icons/green-dot.png"
                },
                visible: true
            });
         }
         function addRedMarker(x, y, description) {
             var marker = new google.maps.Marker({
                position: new google.maps.LatLng(x, y),
                map: map,
                title: description,
                icon: {
                    url: "http://maps.google.com/mapfiles/ms/icons/red-dot.png"
                },
                visible: true
             });
         }
    }
    </script>

    <script src=@("https://maps.googleapis.com/maps/api/js?key=" + TrashCollector.Controllers.Secrets.GoogleMapsAPIKey + "&callback=myMap")></script>
}
<a class="btn btn-primary" asp-action="Index">Main Page</a>