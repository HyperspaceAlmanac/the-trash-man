@using TrashCollector.ViewModels;
@model TrashCollector.Models.Employee

@{
    ViewData["Title"] = "Details";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h1>Welcome back, @Model.FirstName @Model.LastName!</h1>
<a asp-action="FillOutInformation" asp-route-EmployeeId="@Model.Id" class="btn btn-primary">Update Information</a>
<br />
<a class="btn btn-info" asp-action="WeeklyPlanner" asp-route-offset=-1>Weekly Planner</a>
<br />
<h3>Today's date: @Model.WeekDay</h3>

<h1>Completed Pickups</h1>
@foreach (var customer in Model.Completed)
{
    <tr>
        <td>
            <div>
                Request completed for @customer.FirstName @customer.LastName on @($"{customer.StreetAddress} {customer.City}, {customer.State} {customer.ZipCode}")
                <a class="btn btn-warning" asp-action="CustomerProfile" asp-route-CustomerId=@customer.Id asp-route-NeedsPickup="false" asp-route-Offset="-1">ViewProfile</a>
            </div>
        </td>
    </tr>
}
<h1>Remaining Requests</h1>
@foreach (var customer in Model.NeedToCollect)
{
    <tr>
        <td>
            <div>
                @if (customer.Offset == -1)
                {
                    <div class="text-info">Customer changed pickup day to today after weekly pickup</div>
                    @if (customer.WeeklyPickup)
                    {
                    <div class="text-warning">
                        Ignore Pickup request from @customer.FirstName @customer.LastName on @($"{customer.StreetAddress} {customer.City}, {customer.State} {customer.ZipCode}")
                        <a class="btn btn-warning" asp-action="CustomerProfile" asp-route-CustomerId=@customer.Id asp-route-NeedsPickup="true" asp-route-Offset="-1">ViewProfile</a>
                    </div>
                    }
                    else
                    {
                    <div class="text-info">
                        One time pickup (also scheduled today) for @customer.FirstName @customer.LastName on @($"{customer.StreetAddress} {customer.City}, {customer.State} {customer.ZipCode}")
                        <a class="btn btn-info" asp-action="CompletePickup" asp-route-EmployeeId=@Model.Id asp-route-CustomerId=@customer.Id asp-route-weeklyPickup=@customer.WeeklyPickup>Confirm Pickup</a>
                        <a class="btn btn-warning" asp-action="CustomerProfile" asp-route-CustomerId=@customer.Id asp-route-NeedsPickup="true" asp-route-Offset="-1">ViewProfile</a>
                    </div>
                    }
                }
                else
                {
                    <div>
                        @(customer.WeeklyPickup ? "Scheduled Weekly Pickup for" : "One time pickup for")
                        @customer.FirstName @customer.LastName on @($"{customer.StreetAddress} {customer.City}, {customer.State} {customer.ZipCode}")
                        <a class="btn btn-info" asp-action="CompletePickup" asp-route-EmployeeId=@Model.Id asp-route-CustomerId=@customer.Id asp-route-weeklyPickup=@customer.WeeklyPickup>Confirm Pickup</a>
                        <a class="btn btn-warning" asp-action="CustomerProfile" asp-route-CustomerId=@customer.Id asp-route-NeedsPickup="true" asp-route-Offset="-1">ViewProfile</a>
                    </div>
                }

            </div>
        </td>
    </tr>
}

@foreach (CustomerLocation profile in Model.Profiles)
{
    if (!profile.GeoLocationSuccess)
    {
        <div>Unable to find @profile.FullAddress on the map </div>
    }
}
<!-- Part of implementation based on what is shown in https://stackoverflow.com/questions/17195950/adding-multiple-markers-to-google-maps -->
<!-- I used similar process of creating javascript functions for adding markers -->
<!-- And adding in multiple calls to these through Html.Raw() -->
@if (Model.Profiles.Where(p => p.GeoLocationSuccess).Count() > 0)
{
    <input type="button" class="btn btn-primary" value="Display Customers on Map" id="display-all-customers" />
    <div id="allCustomersMap" class="google-map"></div>

    <script>
        document.getElementById('display-all-customers').onclick = function myMap() {
        const latAndLng = @Html.Raw("{ lat: " + Model.Profiles.Where(p => p.GeoLocationSuccess).First().Latitude + ", lng: " + Model.Profiles.Where(p => p.GeoLocationSuccess).First().Longitude + " };");
        var mapProp = {
            center: latAndLng,
            zoom: 15,
            mapTypeId: google.maps.MapTypeId.ROADMAP
        };
        var map = new google.maps.Map(document.getElementById("allCustomersMap"), mapProp);

        @foreach (CustomerLocation profile in Model.Profiles) {
            if (profile.GeoLocationSuccess)
            {
                if (profile.NeedsPickup)
                {
                    @Html.Raw("addRedMarker(" + profile.Latitude + ", " + profile.Longitude + ", " + "\"" + profile.FullAddress + "\");");
                }
                else
                {
                    @Html.Raw("addGreenMarker("+ profile.Latitude + ", " + profile.Longitude + ", " + "\"" + profile.FullAddress + "\");");
                }
            }
         }
         function addGreenMarker(x, y, description) {
             new google.maps.Marker({
                position: new google.maps.LatLng(x, y),
                map: map,
                title: description,
                icon: {
                        url: "http://maps.google.com/mapfiles/ms/icons/green-dot.png"
                },
                visible: true
            });
         }
         function addRedMarker(x, y, description) {
             new google.maps.Marker({
                position: new google.maps.LatLng(x, y),
                map: map,
                title: description,
                icon: {
                    url: "http://maps.google.com/mapfiles/ms/icons/red-dot.png"
                },
                visible: true
             });
         }
    }
    </script>

    <script src=@("https://maps.googleapis.com/maps/api/js?key=" + TrashCollector.Controllers.Secrets.GoogleMapsAPIKey + "&callback=myMap")></script>
}
