@using TrashCollector.ViewModels; 
@model TrashCollector.Models.Employee

@{
    ViewData["Title"] = "Details";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h1>Welcome back, @Model.FirstName @Model.LastName!</h1>
<a asp-action="FillOutInformation" asp-route-EmployeeId="@Model.Id" class="btn btn-primary">Update Information</a>
<a class="btn btn-primary" asp-action="WeeklyPlanner" asp-route-offset=-1>Weekly Planner</a>
<a asp-action="MapsAPI" class="btn btn-primary">Map</a>

<h3>Today's date: @Model.WeekDay</h3>

<h1>Completed Pickups</h1>
@foreach (var customer in Model.Completed)
{
    <tr>
        <td>
            <div>
                Request completed for @customer.FirstName @customer.LastName on @($"{customer.StreetAddress} {customer.City}, {customer.State} {customer.ZipCode}")
                <a class="btn btn-warning" asp-action="CustomerProfile" asp-route-CustomerId=@customer.Id asp-route-NeedsPickup="false" asp-route-Offset="-1">ViewProfile</a>
            </div>
        </td>
    </tr>
}
<h1>Remaining Requests</h1>
@foreach (var customer in Model.NeedToCollect)
{
    <tr>
        <td>
            <div>
                @(customer.WeeklyPickup ? "Scheduled Weekly Pickup for" : "One time pickup for")
                @customer.FirstName @customer.LastName on @($"{customer.StreetAddress} {customer.City}, {customer.State} {customer.ZipCode}")
                <a class="btn btn-info" asp-action="CompletePickup" asp-route-EmployeeId=@Model.Id asp-route-CustomerId=@customer.Id asp-route-weeklyPickup=@customer.WeeklyPickup>Confirm Pickup</a>
                <a class="btn btn-warning" asp-action="CustomerProfile" asp-route-CustomerId=@customer.Id asp-route-NeedsPickup="true" asp-route-Offset="-1">ViewProfile</a>
            </div>
        </td>
    </tr>
}
<input type="button" class="btn btn-primary" value="Display Customers on Map" id="show-map" />
@foreach (CustomerLocation profile in Model.Profiles)
{
    if (!profile.GeoLocationSuccess)
    {
        <div>Unable to find @profile.FullAddress on the map </div>
    }
}
@if (Model.Profiles.Where(p => p.GeoLocationSuccess).Count() > 0) {
<div id="allCustomersMap" class="google-map"></div>

<script>
    function myMap() {
        const latAndLng = { lat: @Model.Latitude, lng: @Model.Longitude};
        var mapProp = {
            center: latAndLng,
            zoom: 15,
            mapTypeId: google.maps.MapTypeId.ROADMAP
        };
        var map = new google.maps.Map(document.getElementById("allCustomersMap"), mapProp);

        var marker = new google.maps.Marker({
            position: latAndLng,
            map: map,
            title: '@(Model.FullAddress)',
            visible: true
        });
    }
</script>

<script src= @("https://maps.googleapis.com/maps/api/js?key=" + TrashCollector.Controllers.Secrets.GoogleMapsAPIKey + "&callback=myMap")></script>
}
